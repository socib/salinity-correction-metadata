# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2018-12-13 10:08
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
from scb_mng_models.models.instrumentation import Deployment
from vessel_correction.apps.salinity_correction.models import CtdSalinityCorrection

class Migration(migrations.Migration):

    dependencies = [
        ('scb_mng_models', '__first__'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('salinity_correction', '0001_initial'),
    ]

    operations = [

        migrations.CreateModel(
            name='glider_salinity_correction',
            fields=[
                ('glider_salinity_correction_id', models.AutoField(primary_key=True, serialize=False)),
                #('glider_salinity_correction_deployment_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='scb_mng_models.Deployment')),
                ('glider_salinity_correction_deployment_id', models.ForeignKey(to='scb_mng_models.Deployment',
                db_column='glider_salinity_correction_deployment_id', db_index=False, db_constraint=False)),
                ('glider_salinity_correction_date_last_service', models.DateField(blank=True, null=True, verbose_name='date last service prior to mission')),
                ('glider_salinity_correction_interval_service_mission', models.IntegerField(blank=True, null=True, verbose_name='interval service to mission')),
                ('glider_salinity_correction_sensor_01_corr_coeff', models.FloatField(blank=True, verbose_name='sensor 01 correction coefficient')),
                ('glider_salinity_correction_residual_salinity_differences', models.CharField(max_length=200,blank=True, verbose_name='residual salinity differences std background data')),
                ('glider_salinity_correction_salinity_error_estimate', models.FloatField(blank=True, verbose_name='salinity error estimate')),
                ('glider_salinity_correction_sensor_01_id', models.ForeignKey(to='scb_mng_models.Sensor',
                db_column='glider_salinity_correction_sensor_01_id', db_index=False, db_constraint=False, null=True, blank=True)),
                ('glider_salinity_correction_background_data_id', models.IntegerField(blank=True, null=True, verbose_name='glider salinity correction background data id')),
                ('glider_salinity_correction_theta_sal_range', models.CharField(max_length=200, null=False, blank=False, verbose_name='theta-sal whitespace for correction potential temperature and practical salinity ranges')),
                ('glider_salinity_correction_comments', models.TextField(blank=True, null=True, verbose_name='comments')),
                ('glider_salinity_correction_approved_results', models.BooleanField(default=False, blank=True, null=True, verbose_name='approved corrections results')),
                ('created_on', models.DateField(null=False,blank=False)),
                ('created_by_id', models.IntegerField(null=False, blank=False)),
                ('updated_on', models.DateField(null=False, blank=False)),
                ('updated_by_id', models.IntegerField(null=False, blank=False)),

            ],
            options={
                'managed': True,
                'db_table': '"corrections\".\"glider_salinity_correction"',
                'verbose_name': 'Glider Salinity Correction',
                'verbose_name_plural': 'Glider Salinity Corrections',
            },
        ),
        migrations.RunSQL("ALTER TABLE corrections.glider_salinity_correction ADD CONSTRAINT glider_salinity_correction_deployment_fk FOREIGN KEY(glider_salinity_correction_deployment_id) REFERENCES instrumentation.deployment(deployment_id)"),
        migrations.RunSQL("ALTER TABLE corrections.glider_salinity_correction ADD CONSTRAINT glider_salinity_correction_background_data_fk FOREIGN KEY (glider_salinity_correction_background_data_id) REFERENCES corrections.ctd_salinity_correction(ctd_salinity_correction_id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION;"),
        migrations.RunSQL("ALTER TABLE corrections.glider_salinity_correction ADD CONSTRAINT glider_salinity_correction_sensor_01_fk FOREIGN KEY(glider_salinity_correction_sensor_01_id) REFERENCES instrumentation.sensor(sensor_id)")
    ]
